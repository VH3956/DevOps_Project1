// pipeline {
//     agent any

//     parameters {
//         string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to deploy (e.g., main, RC, or feature branch)')
//         string(name: 'SERVICE', defaultValue: '', description: 'Service to deploy (e.g., customers-service, vets-service)')
//         string(name: 'COMMIT_ID', defaultValue: '', description: 'Commit ID for the Docker image (leave empty for latest)')
//     }

//     environment {
//         DOCKER_IMAGE = 'your-dockerhub-username/spring-petclinic'
//         KUBECONFIG = credentials('kubeconfig-cred') // Kubeconfig for Kubernetes cluster
//     }

//     stages {
//         stage('Deploy to Kubernetes') {
//             steps {
//                 script {
//                     def domain = ''
//                     if (params.BRANCH == 'main') {
//                         domain = 'dev.spring-petclinic.com'
//                     } else if (params.BRANCH == 'RC') {
//                         domain = 'rc.spring-petclinic.com'
//                     } else {
//                         domain = "${params.COMMIT_ID}.dev.spring-petclinic.com"
//                     }

//                     def imageTag = params.COMMIT_ID ?: 'latest'
//                     def service = params.SERVICE

//                     echo "Deploying ${service} from branch ${params.BRANCH} with image tag ${imageTag} to ${domain}"

//                     // Apply Kubernetes deployment
//                     sh """
//                     kubectl set image deployment/${service} ${service}=${DOCKER_IMAGE}-${service}:${imageTag} -n spring-petclinic
//                     kubectl rollout restart deployment/${service} -n spring-petclinic
//                     """

//                     // Create or update ingress rule
//                     sh """
//                     kubectl apply -f - <<EOF
//                     apiVersion: networking.k8s.io/v1
//                     kind: Ingress
//                     metadata:
//                       name: ${service}-ingress
//                       namespace: spring-petclinic
//                       annotations:
//                         nginx.ingress.kubernetes.io/rewrite-target: /
//                     spec:
//                       rules:
//                       - host: ${domain}
//                         http:
//                           paths:
//                           - path: /
//                             pathType: Prefix
//                             backend:
//                               service:
//                                 name: ${service}
//                                 port:
//                                   number: 8080
//                     EOF
//                     """
//                 }
//             }
//         }
//     }

//     post {
//         success {
//             echo "Deployment successful! Access the service at http://${params.BRANCH == 'main' ? 'dev.spring-petclinic.com' : params.BRANCH == 'RC' ? 'rc.spring-petclinic.com' : params.COMMIT_ID + '.dev.spring-petclinic.com'}"
//         }
//         failure {
//             echo "Deployment failed. Check logs for details."
//         }
//     }
// }


pipeline {
    agent any
    parameters {
        string(name: 'ADMIN_SERVER_TAG', defaultValue: 'latest', description: 'Image tag for admin-server')
        string(name: 'API_GATEWAY_TAG', defaultValue: 'latest', description: 'Image tag for api-gateway')
        string(name: 'CONFIG_SERVER_TAG', defaultValue: 'latest', description: 'Image tag for config-server')
        string(name: 'CUSTOMERS_SERVICE_TAG', defaultValue: 'latest', description: 'Image tag for customers-service')
        string(name: 'DISCOVERY_SERVER_TAG', defaultValue: 'latest', description: 'Image tag for discovery-server')
        string(name: 'VETS_SERVICE_TAG', defaultValue: 'latest', description: 'Image tag for vets-service (e.g., dev_vets_service)')
        string(name: 'VISITS_SERVICE_TAG', defaultValue: 'latest', description: 'Image tag for visits-service')
        string(name: 'GENAI_SERVICE_TAG', defaultValue: 'latest', description: 'Image tag for genai-service')
    }
    environment {
        DOCKER_IMAGE_BASE = "vh3956/spring-petclinic"
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
    }
    stages {

        stage('Deploy Helm Chart') {
            steps {
                script {
                    echo "Deploying Helm Chart for Spring PetClinic..."
                    sh """
                        export KUBECONFIG=${KUBECONFIG}
                        minikube update-context
                        kubectl config delete-cluster minikube || true
                        kubectl config delete-context minikube || true
                        minikube update-context
                        kubectl config view --minify
                        helm upgrade --install spring-petclinic ./spring-petclinic \\
                            --namespace spring-petclinic \\
                            --create-namespace
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "Updating Kubernetes deployments with selected image tags..."
                    sh "kubectl set image deployment/spring-petclinic-admin-server admin-server=${DOCKER_IMAGE_BASE}-admin-server:${params.ADMIN_SERVER_TAG} --record"
                    sh "kubectl set image deployment/spring-petclinic-api-gateway api-gateway=${DOCKER_IMAGE_BASE}-api-gateway:${params.API_GATEWAY_TAG} --record"
                    sh "kubectl set image deployment/spring-petclinic-config-server config-server=${DOCKER_IMAGE_BASE}-config-server:${params.CONFIG_SERVER_TAG} --record"
                    sh "kubectl set image deployment/spring-petclinic-customers-service customers-service=${DOCKER_IMAGE_BASE}-customers-service:${params.CUSTOMERS_SERVICE_TAG} --record"
                    sh "kubectl set image deployment/spring-petclinic-discovery-server discovery-server=${DOCKER_IMAGE_BASE}-discovery-server:${params.DISCOVERY_SERVER_TAG} --record"
                    sh "kubectl set image deployment/spring-petclinic-vets-service vets-service=${DOCKER_IMAGE_BASE}-vets-service:${params.VETS_SERVICE_TAG} --record"
                    sh "kubectl set image deployment/spring-petclinic-visits-service visits-service=${DOCKER_IMAGE_BASE}-visits-service:${params.VISITS_SERVICE_TAG} --record"
                    sh "kubectl set image deployment/spring-petclinic-genai-service genai-service=${DOCKER_IMAGE_BASE}-genai-service:${params.GENAI_SERVICE_TAG} --record"
                    sh "kubectl rollout status deployment/spring-petclinic-vets-service"
                    sh "kubectl rollout status deployment/spring-petclinic-visits-service"
                }
            }
        }

        stage('Expose Service Endpoints') {
            steps {
                script {
                    def adminPort = sh(script: "kubectl get svc spring-petclinic-admin-server -o jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim()
                    def apiPort = sh(script: "kubectl get svc spring-petclinic-api-gateway -o jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim()
                    def configPort = sh(script: "kubectl get svc spring-petclinic-config-server -o jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim()

                    echo "Admin Server is accessible at: <Worker_Node_IP>:${adminPort}"
                    echo "API Gateway is accessible at: <Worker_Node_IP>:${apiPort}"
                    echo "Config Server is accessible at: <Worker_Node_IP>:${configPort}"
                }
            }
        }
    }
    post {
        success {
            echo "CD deployment completed successfully."
        }
        failure {
            echo "CD deployment failed. Check logs for details."
        }
    }
}
