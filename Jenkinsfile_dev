pipeline {
    agent none

    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-cre')
        DOCKER_IMAGE = "vh3956/"
    }

    stages {
        stage('Check Changes') {
            agent { label 'built-in' }
            steps {
                script {
                    def changedFiles = sh(script: "git diff --name-only HEAD^", returnStdout: true).trim().split('\n')
                    def services = [
                        'spring-petclinic-customers-service',
                        'spring-petclinic-visits-service',
                        'spring-petclinic-vets-service',
                        'spring-petclinic-admin-server',
                        'spring-petclinic-api-gateway',
                        'spring-petclinic-config-server',
                        'spring-petclinic-discovery-server',
                        'spring-petclinic-genai-service'
                    ]

                    echo "Changed files: ${changedFiles}"
                    def detected = []
                    for (service in services) {
                        if (changedFiles.any { it.startsWith(service + '/') }) {
                            detected << service
                        }
                    }

                    if (detected.isEmpty()) {
                        echo "No services changed. Skipping pipeline."
                        currentBuild.result = 'ABORTED'
                        return
                    }

                    env.SERVICE_CHANGED = detected.join(',')
                    env.NO_SERVICES_TO_BUILD = 'false'
                }
            }
        }

        stage('Build and Push Changed Services') {
            agent { label 'built-in' }
            when {
                allOf {
                    expression { env.NO_SERVICES_TO_BUILD == 'false' }
                    branch 'main'
                }
            }
            steps {
                script {
                    def commitId = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    def services = env.SERVICE_CHANGED.split(',')

                    sh "echo ${DOCKER_HUB_CREDS_PSW} | docker login -u ${DOCKER_HUB_CREDS_USR} --password-stdin"

                    for (svc in services) {
                        echo "Building and pushing image for ${svc}"
                        sh "./mvnw clean install -pl ${svc} -am -P buildDocker"

                        def image = "${DOCKER_IMAGE}${svc}"
                        sh """
                            docker tag ${image} ${image}:${commitId}
                            docker push ${image}:${commitId}

                            docker tag ${image} ${image}:latest
                            docker push ${image}:latest
                        """
                    }

                    env.IMAGE_TAG = commitId
                }
            }
        }

        stage('Deploy to dev namespace') {
            agent { label 'built-in' }
            when {
                allOf {
                    expression { env.NO_SERVICES_TO_BUILD == 'false' }
                    branch 'main'
                }
            }
            steps {
                script {
                    def services = env.SERVICE_CHANGED.split(',')
                    def imageTag = env.IMAGE_TAG

                    for (svc in services) {
                        def deployName = svc.replace('spring-petclinic-', '') // e.g., "customers-service"
                        def imageFull = "${DOCKER_IMAGE}${svc}:${imageTag}"

                        echo "Updating image for deployment ${deployName} in dev namespace"
                        sh "kubectl -n dev set image deployment/${deployName} ${deployName}=${imageFull} --record"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Deployment to dev namespace complete."
        }
        failure {
            echo "❌ Deployment failed. Please check logs."
        }
        aborted {
            echo "⚠️ Pipeline skipped due to no service changes."
        }
    }
}
